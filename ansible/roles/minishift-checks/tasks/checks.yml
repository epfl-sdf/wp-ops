---
- name: "Giving root bootup rights to developer account"
  shell:
      cmd: |
          set -e -x
          oc adm policy add-scc-to-user anyuid -z default --as system:admin
# Checking weither the prod secure registry is pingable form inside minishift

- name: "Checking minishift internal dns resolver"
  shell:
        cmd: |
          set -e -x
          oc run -it dnsp --image=busybox:latest --attach=false --restart=Never
          sleep 10
          PGR=$(oc exec dnsp -- ping os-docker-registry.epfl.ch -c 3);
          if [ "$PGR" == *"could not find host"* ]; then echo 1; else echo 0; fi
          
  register: code

# Deleting busybox pod used for the ping test
# (deletion is a blocking command, use a deploymentconfig to delete in a parrallel way)
- name: "Cleaning up ..."
  shell:
        cmd: |
          set -e -x
          oc delete pod dnsp --force

- fail: msg="Couldn't ping os-docker-registry.epfl.ch Please check your minishift internal dns (you can change it to another dns server by modifying /etc/resolv.conf within the minishift VM and restarting minishift"
  when: code.stdout == "pod/dnsp created\n1"

- name: "TEST - Log in to Docker registry in production"
  when: "'openshift-namespaces-blue' in group_names"
  shell:
    cmd: |
      set -e -x
      docker logout {{ epfl_openshift_registry_address }} || true
      LOGIN=$(docker login {{ epfl_openshift_registry_address }} -u {{ epfl_openshift_credentials.user }} -p {{ epfl_openshift_credentials.token }} )
      echo $LOGIN
      docker logout {{ epfl_openshift_registry_address }}
  register: login

- debug:
    var: login.stdout_lines[1]

- fail: msg=" Couldn't login to os-docker-registry.epfl.ch using credentials from ~/.kube/conf, make sure you logged in at least once on the host machine"
  when: "login.stdout.find('v=' ~ 'Login Succeeded') == 1"


- name: "Giving developer user correct roles"
  shell:
        cmd: |
          set -e -x
          oc adm policy add-cluster-role-to-user cluster-admin developer --as system:admin
  register: role_output

- debug:
    var: role_output.stdout
